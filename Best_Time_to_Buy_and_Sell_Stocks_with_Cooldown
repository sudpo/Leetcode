//https://leetcode.com/discuss/72030/share-my-dp-solution-by-state-machine-thinking

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if(n <= 1) {
            return 0;
        }
        
        vector<int> rest(n, 0); //rest[i] 表示第i天是rest的时候最大的profit (天数从0 开始)
        vector<int> buy(n, 0);  //buy[i] 表示第i天是buy的时候最大的profit
        vector<int> sell(n, 0); //sell[i] 表示第i天是sell的时候最大的profit
        
        buy[0] = - prices[0];
        sell[0] = INT_MIN;
        for(int i = 1; i < n; ++i) {
            rest[i] = max(rest[i-1], sell[i-1]);
            buy[i] = max(rest[i-1] - prices[i], buy[i-1]);
            sell[i] = buy[i-1] + prices[i];
        }
        
        return max(rest[n-1], sell[n-1]);
        
    }
};
