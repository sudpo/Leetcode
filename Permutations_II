class Solution {
    void permuteHelper(vector<int> &nums, vector<vector<int> > &res, vector<int> solution, vector<bool> &isUsed) {
        if(solution.size() == nums.size()) {
            res.push_back(solution);
            return;
        }
        for(int i = 0; i < nums.size(); ++i) {
            if(( i != 0 && nums[i] == nums[i-1] && isUsed[i-1] == false) || isUsed[i] == true) {
                continue;
            }
            solution.push_back(nums[i]);
            isUsed[i] = true;
            permuteHelper(nums, res, solution, isUsed);
            solution.pop_back();
            isUsed[i] = false;
        }
        
        
    }
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int> > res;
        if(n == 0) {
            return res;
        }
        
        sort(nums.begin(), nums.end());
        vector<bool> isUsed(n, false);
        vector<int> solution;
        permuteHelper(nums, res, solution, isUsed);
        
        return res;
    }
};
