class Solution {
    string oneline(vector<string> & solution, int maxWidth){
        int n = solution.size();
        string res;
        if(n == 1){
            res += solution[0];
            while(res.size() < maxWidth){
                res += ' ';
            }
            return res;
        }
        
        int totalLen = 0;
        for(int i = 0; i < n; i++){
            totalLen += solution[i].size();
        }
        int space = maxWidth - totalLen;
        int eachSpace = space / (n-1);
        int extraSpace = space % (n-1);

        for(int i = 0; i < n; ++i){
            res += solution[i];
            if(i < n-1) {
                for(int j = 0; j < eachSpace; ++j){
                    res += ' ';
                }   
                if(extraSpace != 0){
                    res += ' ';
                    extraSpace--;
                }
            }
        }
        return res;
    }
    string lastline(vector<string> & solution, int maxWidth){
        string res;
        for(int i = 0; i< solution.size(); ++i) {
            res += solution[i] + ' ';
        }
        if(res.size() > maxWidth){
            res.pop_back();
            return res;
        }
        while(res.size() < maxWidth){
            res += ' ';
        }
        return res;
    }
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        vector<vector<string> > res;
        vector<string> result;
        if(words.size() == 0 || maxWidth == 0) {
            return words;
        }
        if(words.size() == 1 && words[0] == " " ){
            string temp(maxWidth, ' ');
            result.push_back(temp);
            return result;
        }
        int i = 0;
        while(i < words.size())
        {
            int length = 0;
            vector<string> solution;
            while(length <= maxWidth && i < words.size()){
                if(length + words[i].size() <= maxWidth)
                {
                    length += words[i].size() + 1;
                    solution.push_back(words[i]);
                    i++;
                }
                else{
                    
                    break;
                }
            }
            res.push_back(solution);
        }
        
        for(int i = 0; i < res.size() - 1; i++){
            result.push_back(oneline(res[i], maxWidth));
        }
        result.push_back(lastline(res[res.size() - 1], maxWidth));
        return result;
        
        
    }
};
