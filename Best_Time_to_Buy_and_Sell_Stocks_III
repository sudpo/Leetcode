class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if(n <= 1) {
            return 0;
        }
        
        vector<int> leftMax(n, 0);  //leftMax[i] means the most profit when the last prices is prices[i]
        vector<int> rightMax(n, 0); //rightMax[i] measn the most profit when the first prices is prices[i]
        
        int currMin = prices[0];
        for(int i = 1; i < n; ++i) {
            currMin = min(currMin, prices[i]);
            leftMax[i] = max(leftMax[i-1], prices[i] - currMin);
        }
        
        int currMax = prices[n-1];
        for(int i = n-2; i > 0; --i){
            currMax = max(currMax, prices[i]);
            rightMax[i] = max(rightMax[i+1], currMax - prices[i]);
        }
        
        int result =0 ;
        for(int i = 0; i < n; ++i) {
            result = max(result,rightMax[i] + leftMax[i]);
        }
        
        return result;
    }
};
