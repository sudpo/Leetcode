class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if(n <= 1) {
            return 0;
        }
        
        vector<int> leftMax(n, 0);  //leftMax[i] means the most profit when the last prices is prices[i]
        vector<int> rightMax(n, 0); //rightMax[i] measn the most profit when the first prices is prices[i]
        
        int currMin = prices[0];
        for(int i = 1; i < n; ++i) {
            currMin = min(currMin, prices[i]);
            leftMax[i] = max(leftMax[i-1], prices[i] - currMin);
        }
        
        int currMax = prices[n-1];
        for(int i = n-2; i > 0; --i){
            currMax = max(currMax, prices[i]);
            rightMax[i] = max(rightMax[i+1], currMax - prices[i]);
        }
        
        int result =0 ;
        for(int i = 0; i < n; ++i) {
            result = max(result,rightMax[i] + leftMax[i]);
        }
        
        return result;
    }
};

A clean DP solution which generalizeds to k transactions
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if(n <= 1) {
            return 0;
        }
        
        const int K = 2;
        vector<vector<int> > dp(K+1, vector<int>(n, 0));
        //dp[k][i] means the max profit up until prices[i] with at most k transactions
        //dp[k][i] = max(dp[k][i-1], prices[i] - prices[j] + dp[k-1][j]) (j from 0 to i-1)
        //         = max(dp[k][i-1], prices[i] + max(dp[k-1][j] -prices[j]))
        
        int maxprof = 0;
        for(int k = 1; k <= K; ++k) {
            int tmpMax = dp[k-1][0] - prices[0];
            for(int i = 1; i < n; ++i) {
                dp[k][i] = max(dp[k][i-1], prices[i] + tmpMax);
                tmpMax = max(tmpMax, dp[k-1][i] - prices[i]);
                maxprof = max(maxprof, dp[k][i]); 
            }
        }
        
        return maxprof;
    }
};
