/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
    ListNode* merge(ListNode* head1, ListNode* head2){
        if(head1 == NULL) {
            return head2;
        }
        if(head2 == NULL) {
            return head1;
        }
        if(head1->val < head2->val) {
            head1->next = merge(head1->next, head2);
            return head1;
        }
        else{
            head2->next = merge(head2->next, head1);
            return head2;
        }
    }
public:
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == NULL) {
            return head;
        }
        
        ListNode* pre = head;
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast != NULL && fast->next != NULL){
            pre = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        pre->next = NULL;
        ListNode *firstHead = sortList(head);
        ListNode *secondHead = sortList(slow);
        return merge(firstHead, secondHead);
    }
};
