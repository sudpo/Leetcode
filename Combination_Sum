class Solution {
    void sumHelper(vector<int> & candidates, int target, vector<vector<int> > &res, vector<int> &solution, int start){
        if(target == 0) {
            res.push_back(solution);
            return;
        }
        for(int i  = start; i < candidates.size(); ++i){
            if(target - candidates[i] >= 0) {
                solution.push_back(candidates[i]);
                sumHelper(candidates, target-candidates[i], res, solution, i);
                solution.pop_back();
            }
        }
    } 
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        int n = candidates.size();
        vector<vector<int> > res;
        if(n == 0){
            return res;
        }
        
        sort(candidates.begin(), candidates.end());
        
        vector<int> solution;
        sumHelper(candidates, target, res, solution, 0);
        return res;
        
    }
};
