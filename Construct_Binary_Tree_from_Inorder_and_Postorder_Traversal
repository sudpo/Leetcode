/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    int findPos(vector<int> & inorder, int inorderStart, int inorderEnd, int target){
        for(int i = inorderStart; i <= inorderEnd; ++i){
            if(inorder[i] == target) {
                return i;
            }
        }
        return -1;
    }
    
    TreeNode* buildTree(vector<int>& inorder, int inorderStart, int inorderEnd, vector<int> &postorder, int postorderStart, int postorderEnd){
        if(inorderStart > inorderEnd){
            return NULL;
        }
        
        int pos = findPos(inorder, inorderStart, inorderEnd, postorder[postorderEnd]);
        TreeNode * root = new TreeNode(postorder[postorderEnd]);
        root->left = buildTree(inorder, inorderStart, pos-1, postorder, postorderStart, postorderStart+ (pos - inorderStart) - 1);
        root->right = buildTree(inorder, pos+1, inorderEnd, postorder, postorderStart + (pos - inorderStart), postorderEnd - 1);
        return root;
    }
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return buildTree(inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1);
    }
};
