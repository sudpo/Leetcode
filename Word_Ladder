class Solution {
public:
    int ladderLength(string beginWord, string endWord, unordered_set<string>& wordList) {
        if(beginWord == endWord){
            return 1;
        }
        
        int n = beginWord.size();
        if(n != endWord.size()) {
            return 0;
        }
        queue<string> que;
        que.push(beginWord);
        wordList.erase(beginWord);
        int length = 2;
        while(!que.empty()){
            int size = que.size();
            for(int i = 0; i < size; ++i){
                string word = que.front();
                que.pop();
                for(int j = 0; j < n; ++j){
                    char oldChar = word[j];
                    for(char ch = 'a'; ch <= 'z'; ++ch){
                        if(ch == oldChar){
                            continue;
                        }
                        word[j] = ch;
                        if(word == endWord){
                            return length;
                        }
                        if(wordList.find(word) != wordList.end()){
                            que.push(word);
                            wordList.erase(word);
                        }
                    }
                    word[j] = oldChar;
                }
            }
            length++;
        }
        return 0;
    }
};
