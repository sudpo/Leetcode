/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

// 暴力解法，in order traversal
 
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        vector<int> res;
        res = tranverse(root);
        return res[k-1];
        
    }
    
    vector<int> traversal(TreeNode *root) {
        vector<int> res;
        if(root == NULL) {
            return res;
        }
        vector<int> left = tranversal(root->left);
        vector<int> right = tranversal(root->right);
        res.insert(res.end(), left.begin(), left.end());
        res.push_back(root->val);
        res.insert(res.end(), right.begin(), right.end());
        return res;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode *> st;
        TreeNode *p = root;
        while(p != NULL || !st.empty()){
            while(p != NULL) {
                st.push(p);
                p = p->left;
            }
            p = st.top();
            --k;
            if(k == 0) {
                return p->val;
            }
            st.pop();
            p = p -> right;
        }
    }
};
