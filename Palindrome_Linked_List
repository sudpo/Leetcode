/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL || head->next == NULL) {
            return true;
        }
        
        ListNode *mid = findMid(head);
        ListNode *newHead = reverse(mid);
        while(newHead != NULL){
            if(head->val != newHead->val){
                return false;
            }
            head = head->next;
            newHead = newHead->next;
        }
        return true;
        
        
    }
    
    ListNode *reverse(ListNode *head){
        ListNode *pre = NULL;
        while(head != NULL) {
            ListNode *temp = head->next;
            head->next = pre;
            pre = head;
            head = temp;
        }
        return pre;
    }
    
    ListNode *findMid(ListNode* head) {
        ListNode *slow = head;
        ListNode *fast = head;
        while(fast != NULL && fast->next != NULL) {
            slow = slow->next;
            fast = fast->next->next;
        }
        if(fast == NULL) {
            return slow;
        }
        else{
            return slow->next;
        }
    }
};
