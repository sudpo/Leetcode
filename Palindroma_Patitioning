class Solution {
    void partitionHelper(string &s, vector<vector<string> > &res, vector<string> &solution, int start, vector<vector<bool> > &isPal){
        if(start == s.size()) {
            res.push_back(solution);
            return;
        }
        if(start < s.size()) {
            for(int i = start; i < s.size(); ++i){
                if(isPal[start][i]) {
                    string temp = s.substr(start, i-start+1);
                    solution.push_back(temp);
                    partitionHelper(s, res, solution, i+1, isPal);
                    solution.pop_back();
                }
            }
        }
    }
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string> > res;
        int n = s.size();
        if(n == 0) {
            return res;
        }
        
        vector<vector<bool> > isPal(n, vector<bool> (n, false));
        for(int i = n-1; i >= 0; --i){
            for(int j = i; j < n; j++) {
                if((i+1 >= j-1 || isPal[i+1][j-1]) && s[i] == s[j]){
                    isPal[i][j] = true;
                }
            }
        }
        vector<string> solution;
        partitionHelper(s, res, solution, 0, isPal);
        return res;
    }
};
