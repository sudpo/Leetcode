//backTracking 


class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int> > res;
        if(n == 0){
            return res;
        }
        
        vector<int> solution;
        sort(nums.begin(), nums.end());
        subsets(nums, solution, 0 , res);
        return res;
        
    }
    
    void subsets(vector<int> &nums, vector<int> solution, int start, vector<vector<int> > &res){
        res.push_back(solution);
        for(int i = start; i < nums.size(); ++i) {
            solution.push_back(nums[i]);
            subsets(nums, solution, i+1, res);
            solution.pop_back();
        }
    }
};


Iterative

This problem can also be solved iteratively. Take [1, 2, 3] in the problem statement as an example. The process of generating all the subsets is like:

Initially: [[]]
Adding the first number to all the existed subsets: [[], [1]];
Adding the second number to all the existed subsets: [[], [1], [2], [1, 2]];
Adding the third number to all the existed subsets: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]].

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int> > res(1, vector<int>());
        for(int i = 0; i < nums.size(); ++i) {
            int n = res.size();
            for(int j = 0; j < n; ++j) {
                res.push_back(res[j]);
                res.back().push_back(nums[i]);
            }
        }
        return res;
        
    }
};
